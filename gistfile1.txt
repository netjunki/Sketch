class Vector {
  int x;
  int y;
  Float _length = null;
  
  Vector(int _x, int _y) {
    this.x = _x;
    this.y = _y;
  }
  
  String toString() {
    return "Vector: " + this.x + "," + this.y;
  }
  
  Vector reverse() {
    println("reverse: " + new Vector(this.x*-1, this.y*-1));
    return new Vector(this.x*-1, this.y*-1);
  }
  
  int polarity(int e) {
    return round(e / abs(e));
  }
  
  float length() {
    if (this._length == null) {
      this._length = sqrt( pow(this.x, 2) + pow(this.y, 2) );
    }
    return this._length;
  }
  
  Vector resizeTo(float length) {
    println("rezizeTo: " + this);
    if (this.x == 0 && this.y == 0) {
      this._length = 0.0;
    } else if (this.x == 0) {
      this._length = length;
      println("polarity y");
      this.y = int(length * polarity(this.y));
    } else if (this.y == 0) {
      this._length = length;
      println("polarity x");
      this.x = int(length * polarity(this.x));
    } else {
      float proportion = abs(this.y*1.0/this.x*1.0);
      println("polarity x/y");
      println("proportion: " + proportion);
      float _x = sqrt(pow(length,2) / (1 + pow(proportion,2)));
      float _y = proportion * this.x;
      this._length = length;
      this.x = this.x * polarity(this.x);
      this.y = this.y * polarity(this.y);
    }
    return this;
  }
  
  float angleTo(Vector v) {
    float divisor = this.length() * v.length();
    if (divisor == 0) {
      return 0;
    } else {
      return acos((this.x * v.x + this.y * v.y) / divisor) / PI;
    }
  }
}

class Point {
  int x;
  int y;
  
  Point(int _x, int _y) {
    this.x = _x;
    this.y = _y;
  }
  
  String toString() {
    return "Point: " + this.x + "," + this.y;
  }
  
  Vector getVectorToCoordinates(int _x, int _y) {
    return new Vector (_x - this.x, _y - this.y);
  }
  
  Vector getVectorFromCoordinates(int _x, int _y) {
    return getVectorToCoordinates(_x,_y).reverse();
  }
  
  Vector getVectorToPoint(Point p) {
    return new Vector(p.x - this.x, p.y - this.y);
  }
  
  Vector getVectorFromPoint(Point p) {
    return getVectorToPoint(p).reverse();
  }
}

Point  A, B, C, D;
Vector AB, BC, CD, BCP1, CCP2;
float ABC, BCD;

D = new Point(20,50); // now
C = new Point(50,25); // previous
B = new Point(85,55); // previous previous
A = new Point(90,70); // previous^3 (or if there isn't that much data this can be 0,0)
CD = C.getVectorToPoint(D);
BC = B.getVectorToPoint(C);
AB = A.getVectorToPoint(B);

float minlenfraction = 0.05;
float maxlen = BC.length() * 0.35;

ABC = BC.angleTo(AB.reverse());
BCD = CD.angleTo(BC.reverse());
println(ABC);
println(BCD);

BCP1 = new Vector(AB.x + BC.x, AB.y + BC.y).resizeTo(
        max(minlenfraction, ABC) * maxlen);
CCP2 = (new Vector(BC.x + CD.x, BC.y + CD.y)).reverse().resizeTo(
        max(minlenfraction, BCD) * maxlen);

point(B.x,B.y);
point(C.x,C.y);
point(D.x,D.y);
stroke(255,0,0);
point(BCP1.x,BCP1.y);
point(CCP2.x,CCP2.y);
stroke(0,255,0);
noFill();
bezier(B.x,B.y,BCP1.x,BCP1.y,CCP2.x,CCP2.y,C.x,C.y);
//println(CD.length());
//println(BC.length());
//println(AB.length());
